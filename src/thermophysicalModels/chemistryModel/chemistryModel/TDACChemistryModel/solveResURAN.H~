clockTime cellResClockTime= clockTime();
for(label i4=startat;i4<stopat;i4++)
{
	label celli(Rxf[i4][0]);//check
	cellTime_[celli]=0;
	cellResClockTime.timeIncrement();
	scalarField c(this->nSpecie());
	scalarField c0(this->nSpecie());
	for(label i=0; i<this->nSpecie(); i++)
	{
		c[i] = Rxf[i4][8+i];
	}
	c0=c;
	scalar Ti = Rxf[i4][4];
	scalar pi = Rxf[i4][5];
//	scalar hi = Rxf[i4][6];
scalar deltaTr=Rxf[i4][6];
	scalar rhoi = Rxf[i4][7];
	scalarField phiq(this->nEqns() + nAdditionalEqn);
    scalarField Rphiq(this->nEqns() + nAdditionalEqn);
	//scalarField phiq(this->nEqns());
	for(label i=0; i<this->nSpecie(); i++)
	{
		phiq[i] = c[i]/rhoi*this->specieThermo_[i].W();
	}
	phiq[this->nSpecie()]=Ti;
	phiq[this->nSpecie()+1]=pi;
	if (tabulation_->variableTimeStep())
    {
     	phiq[this->nSpecie() + 2] = Rxf[i4][6];
    }
	//scalar t = t0;
	//scalar tauC = this->deltaTChem_[celli];
    scalar tauC = Rxf[i4][2];

    //scalar dt = min(deltaTr, tauC);
    scalar timeLeft = deltaTr;

    //scalar cTot = 0.0;
 
	// Not sure if this is necessary
    Rphiq = Zero;
    
    clockTime_.timeIncrement();
    
    //retrieveClock_.timeIncrement();
    //phi0 will store the composition of the nearest stored point
   //chemPointBase *phi0;

    //The tabulation algorithm try to retrieve the mapping
    if (tabulation_->retrieve(phiq, Rphiq))
    {
        //nFound_ ++;
       // NQ_++;
        //isatUsage_[celli]=2.0;
        //Rphiq array store the mapping of the query point
        //scalarField Rphiq(this->nSpecie());
        //scalarField RDphiq(this->nSpecie());
        //tabPtr_->calcNewC(phi0, phiq, Rphiq);
        //RetrieveCpuTime_+= retrieveClock_.timeIncrement();
        
        //Rphiq is in mass fraction, it is converted to molar
        //concentration to obtain c (used to compute RR)
       // for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];
    	for (label i=0; i<this->nSpecie(); i++)
        {
        	c[i] = rhoi*Rphiq[i]/this->specieThermo_[i].W();
        }
        searchISATCpuTime_ += clockTime_.timeIncrement();
    }
    //Retrieve has failed. The mapping is computed
    else
    {

        //nFlameSurfaceNodes_++;
        //nDIResidentCells++;
        //RetrieveCpuTime_+= retrieveClock_.timeIncrement();
        //DIClock_.timeIncrement();

        //When using mechanism reduction, the mechanism
        //is reduced before solving the ode including only
        //the active species
        //if (DAC_) mechRed_->reduceMechanism(c, Ti, pi);
        //reduceMechCpuTime_ += clockTime_.timeIncrement();

        /*label nWhileIter=0;
        while(timeLeft > SMALL)
        {
            nWhileIter++;
            nDI_++;
            NQ_++;
            if (DAC_)
            {
                //The complete set of molar concentration is used even if only active species are updated

                completeC_ = c;

                tauC = this->solver().solve(simplifiedC_, Ti, pi, t, dt);

                for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
            }
            else
            {
                //Without dynamic reduction, the ode is directly solved
                //including all the species specified in the mechanism

                //the value of c is updated in the solve function of the chemistrySolverTDAC
                tauC = this->solver().solve(c, Ti, pi, t, dt);
            }

            t += dt;

            // update the temperature
            cTot = sum(c);

            ThermoType mixture(0.0*this->specieThermo()[0]);
            for(label i=0; i<completeC_.size(); i++)
            {
                mixture += (c[i]/cTot)*this->specieThermo()[i];
            }
            Ti = mixture.TH(hi, Ti);

            timeLeft -= dt;
            this->deltaTChem()[celli] = tauC;
            dt = min(timeLeft, tauC);
            dt = max(dt, SMALL);
        }*/
        //cellTime_[celli]=nWhileIter;
        //Pout<<"cellTime resident"<<celli<<" = "<<nWhileIter<<endl;
        //Pout<<"Number of while cellTimes for Resident Reciever cell "<<celli<<" = "<<nWhileIter<<endl;
        //totNWhileIter+=nWhileIter;
// Store total time waiting to attribute to add or grow
        scalar timeTmp = clockTime_.timeIncrement();
		if (reduced)
        {
         	// Reduce mechanism change the number of species (only active)
         	mechRed_->reduceMechanism(c, Ti, pi);
         	nActiveSpecies += mechRed_->NsSimp();
         	nAvg++;
            scalar timeIncr = clockTime_.timeIncrement();
            reduceMechCpuTime_ += timeIncr;
            timeTmp += timeIncr;
        }
        // Calculate the chemical source terms
        while (timeLeft > SMALL)
        {
            scalar dt = timeLeft;
            if (reduced)
            {
                // completeC_ used in the overridden ODE methods
                // to update only the active species
                completeC_ = c;
                // Solve the reduced set of ODE
                this->solve
                (
                    simplifiedC_, Ti, pi, dt, this->deltaTChem_[celli]
                );
                for (label i=0; i<NsDAC_; i++)
                {
                	c[simplifiedToCompleteIndex_[i]] = simplifiedC_[i];
                }
                tauC=this->deltaTChem_[celli];
            }
            else
            {
                this->solve(c, Ti, pi, dt, this->deltaTChem_[celli]);
            tauC=this->deltaTChem_[celli];
            }
            timeLeft -= dt;
        }
        {
            scalar timeIncr = clockTime_.timeIncrement();
            solveChemistryCpuTime_ += timeIncr;
            timeTmp += timeIncr;
        }
        // If tabulation is used, we add the information computed here to
        // the stored points (either expand or add)
        if (tabulation_->active())
        {
        	forAll(c, i)
            {
                Rphiq[i] = c[i]/rhoi*this->specieThermo_[i].W();
            }
            if (tabulation_->variableTimeStep())
            {
                Rphiq[Rphiq.size()-3] = Ti;
                Rphiq[Rphiq.size()-2] = pi;
                Rphiq[Rphiq.size()-1] = deltaT[celli];
            }
            else
            {
                Rphiq[Rphiq.size()-2] = Ti;
                Rphiq[Rphiq.size()-1] = pi;
            }
            label growOrAdd =
                tabulation_->add(phiq, Rphiq, rhoi, deltaT[celli]);
            if (growOrAdd)
            {
                this->setTabulationResultsAdd(celli);
            	addNewLeafCpuTime_ += clockTime_.timeIncrement() + timeTmp;
            }
            else
            {
                this->setTabulationResultsGrow(celli);
                growCpuTime_ += clockTime_.timeIncrement() + timeTmp;
            }
        }

        // When operations are done and if mechanism reduction is active,
        // the number of species (which also affects nEqns) is set back
        // to the total number of species (stored in the mechRed object)
        if (reduced)
        {
            this->nSpecie_ = mechRed_->nSpecie();
        }
        deltaTMin = min(this->deltaTChem_[celli], deltaTMin);
        
        //if (DAC_)
       // {
            //after solving the number of species should be set back to the total number
       //     nSpecie_ = mechRed_->nSpecie();
       //     nNsDAC_++;
        //    meanNsDAC_+=NsDAC();
            //extend the array of active species to the full composition space
       //     for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
       // }

        //deltaTMin = min(tauC, deltaTMin);

        //Rphiq array store the mapping of the query point
       // scalarField Rphiq(this->nSpecie());
        //Transform c array containing the mapping in molar concentration [mol/m3]
        //to Rphiq array in mass fraction
       // for(label i=0; i<this->nSpecie(); i++)
        //{
       //     Rphiq[i] = c[i]/rhoi*Wi[i];
       // }
       // DICpuTime_ += DIClock_.timeIncrement();

        //check if the mapping is in the region of accurate linear interpolation
        //GROW (the grow operation is done in the checkSolution function)
        //GrowClock_.timeIncrement();
        //if(tabPtr_->grow(phi0, phiq, Rphiq))
       // {

        //    isatUsage_[celli]=1.0;
       //     GrowthCpuTime_ += GrowClock_.timeIncrement();
       //     nGrown_ ++;
       // }
        //ADD if the growth failed, a new leaf is created and added to the binary tree
       // else if(normalisedGradT[celli]>=ratio_)
       // {
       //     isatUsage_[celli]=-1.0;

        //}
      //  else if(normalisedGradT[celli]<ratio_)
       // {
      //      isatUsage_[celli]=0.0;
      //      nAdd_ ++;
       //     AddClock_.timeIncrement();
            //Compute the mapping gradient matrix
            //Only computed with an add operation to avoid
            //computing it each time
      //      label Asize = this->nEqns();
      //      if (DAC_) Asize = NsDAC_+2;
      //      List<List<scalar> > A(Asize, List<scalar>(Asize,0.0));
      //      scalarField Rcq(this->nEqns());
       //     scalarField cq(this->nSpecie());
      //      for (label i=0; i<this->nSpecie(); i++)
       //     {
       //         Rcq[i] = rhoi*Rphiq[i]*invWi[i];
        //        cq[i] = rhoi*phiq[i]*invWi[i];
       //     }
       //     Rcq[this->nSpecie()]=Ti;
        //    Rcq[this->nSpecie()+1]=pi;
       //     computeA(A, Rcq, cq, t0, deltaT, Wi, rhoi);
            //add the new leaf which will contain phiq, R(phiq) and A(phiq)
            //replace the leaf containing phi0 by a node splitting the
            //composition space between phi0 and phiq (phi0 contains a reference to the node)
        ///    tabPtr_->add(phiq, Rphiq, A, phi0, this->nEqns());
            //Pout<<"resident cell added so size is "<<tabPtr_->size()<<endl;
        //    addNewLeafCpuTime_ += AddClock_.timeIncrement();
       // }
    }

    //Compute the rate of reaction according to dc=c-c0
    //In the CFD solver the following equation is solved:
    //d(Yi*rho)/dt +convection+diffusion = RR*turbulentCoeff(=1 if not used)
    //Therefore, the unit of RR should be [kg/(m3.s)]
    scalarField dc = c - c0;
    for(label i=0; i<this->nSpecie(); i++)
    {
        this->RR()[i][celli] = dc[i]*this->specieThermo_[i].W()/deltaTr;
    }

    cellTime_[celli]+=cellResClockTime.timeIncrement();
}//End of loop over Resident cells
//Pout<<"Processor"<<Pstream::myProcNo()<<" solved "<<cellIDsTotSize-totSend[Pstream::myProcNo()]<<" cells for itself" <<endl;
//Pout<<"Total Number of while cellTimes for Resident Reciever Cells are "<<totNWhileIter<<endl;



