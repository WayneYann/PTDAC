//UNcommented by ali on bahman 93
label celli(cellIndexTmp[ci]);

scalar rhoi = rho[celli];
scalar Ti = this->thermo().T()[celli];
scalar hi = this->thermo().hs()[celli] + hc[celli];
scalar pi = this->thermo().p()[celli];

scalarField phiq(this->nEqns());
for(label i=0; i<this->nSpecie(); i++)
{
    phiq[i] = this->Y()[i][celli];
}

//Species are stored in mass fraction in the cells
//c arrays indicate the molar concentration of the species
// c = (Y * rho)/W [kmol/m3]
//phiq array store the mass fraction, the temperature and pressure
//(i.e. the composition) of the query point
scalarField c(this->nSpecie());
scalarField c0(this->nSpecie());
for(label i=0; i<this->nSpecie(); i++)
{
    c[i] = rhoi*phiq[i]*invWi[i];
}
phiq[this->nSpecie()]=Ti;
phiq[this->nSpecie()+1]=pi;

//store the initial molar concentration to compute dc=c-c0
c0 = c;

//time step and chemical time step
scalar t = t0;
scalar tauC = this->deltaTChem_[celli];
scalar dt = min(deltaT, tauC);
scalar timeLeft = deltaT;

scalar cTot = 0.0;

retrieveClock_.timeIncrement();
//phi0 will store the composition of the nearest stored point
chemPointBase *phi0;

//The tabulation algorithm try to retrieve the mapping
if (tabPtr_->retrieve(phiq,phi0))
{
    o++;
    nFound_ ++;
    isatUsage_[celli]=2.0;
    //Rphiq array store the mapping of the query point
    scalarField Rphiq(this->nSpecie());
    scalarField RDphiq(this->nSpecie());
    tabPtr_->calcNewC(phi0, phiq, Rphiq);

    RetrieveCpuTime_+= retrieveClock_.timeIncrement();

    //Error Analysis
    if(nFound_%10000==0 && computeMappingOrNot_)
    {
        epsilon8_=0;
        if (DAC_) mechRed_->reduceMechanism(c, Ti, pi);


        while(timeLeft > SMALL)
        {
            if (DAC_)
            {
                //The complete set of molar concentration is used even if only active species are updated

                completeC_ = c;

                tauC = this->solver().solve(simplifiedC_, Ti, pi, t, dt);

                for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
            }
            else
            {
                //Without dynamic reduction, the ode is directly solved
                //including all the species specified in the mechanism

                //the value of c is updated in the solve function of the chemistrySolverTDAC
                tauC = this->solver().solve(c, Ti, pi, t, dt);
            }

            t += dt;

            // update the temperature
            cTot = sum(c);

            ThermoType mixture(0.0*this->specieThermo()[0]);
            for(label i=0; i<completeC_.size(); i++)
            {
                mixture += (c[i]/cTot)*this->specieThermo()[i];
            }
            Ti = mixture.TH(hi, Ti);

            timeLeft -= dt;
            this->deltaTChem()[celli] = tauC;
            dt = min(timeLeft, tauC);
            dt = max(dt, SMALL);
        }
        for(label i=0; i<this->nSpecie(); i++)
        {
            RDphiq[i] = c[i]/rhoi*Wi[i];
        }
        for(label i=0; i<this->nSpecie(); i++)
        {
            epsilon8_+=sqr((RDphiq[i]- Rphiq[i])/tabPtr_->scaleFactor()[i] );
        }
        epsilon8_=sqrt(epsilon8_);
        //Info<< "Mapping Error="<<epsilon8_<<endl;
        mappingError<<epsilon8_<<endl;
    }
    //end of error Analysis

    //Rphiq is in mass fraction, it is converted to molar
    //concentration to obtain c (used to compute RR)
    for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];

    //Compute the rate of reaction according to dc=c-c0
    //In the CFD solver the following equation is solved:
    //d(Yi*rho)/dt +convection+diffusion = RR*turbulentCoeff(=1 if not used)
    //Therefore, the unit of RR should be [kg/(m3.s)]
    scalarField dc = c - c0;
    for(label i=0; i<this->nSpecie(); i++)
    {
        this->RR()[i][celli] = dc[i]*Wi[i]/deltaT;
    }

}
/*else if(tabPtr_->MFUretrieve(phiq,phi0))
{
    o++;
    nFound_ ++;
    isatUsage_[celli]=2.0;
    nUsedMFUResidentCells++;
    //Rphiq array store the mapping of the query point
    scalarField Rphiq(this->nSpecie());
    scalarField RDphiq(this->nSpecie());
    tabPtr_->calcNewC(phi0, phiq, Rphiq);
    for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];

    //Compute the rate of reaction according to dc=c-c0
    //In the CFD solver the following equation is solved:
    //d(Yi*rho)/dt +convection+diffusion = RR*turbulentCoeff(=1 if not used)
    //Therefore, the unit of RR should be [kg/(m3.s)]
    scalarField dc = c - c0;
    for(label i=0; i<this->nSpecie(); i++)
    {
        this->RR()[i][celli] = dc[i]*Wi[i]/deltaT;
    }


}
else if(tabPtr_->MRUretrieve(phiq,phi0))
{
    o++;
    nFound_ ++;
    isatUsage_[celli]=2.0;
    nUsedMRUResidentCells++;
    //Rphiq array store the mapping of the query point
    scalarField Rphiq(this->nSpecie());
    scalarField RDphiq(this->nSpecie());
    tabPtr_->calcNewC(phi0, phiq, Rphiq);
    for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];

    //Compute the rate of reaction according to dc=c-c0
    //In the CFD solver the following equation is solved:
    //d(Yi*rho)/dt +convection+diffusion = RR*turbulentCoeff(=1 if not used)
    //Therefore, the unit of RR should be [kg/(m3.s)]
    scalarField dc = c - c0;
    for(label i=0; i<this->nSpecie(); i++)
    {
        this->RR()[i][celli] = dc[i]*Wi[i]/deltaT;
    }

}*/
else if(iterator<6)
{
    //Retrieve has failed. The mapping is computed for the first step
    //clockTime7_.timeIncrement();
    

    //nDIResidentCells++;
    RetrieveCpuTime_+= retrieveClock_.timeIncrement();
    DIClock_.timeIncrement();
	oo++;
    //When using mechanism reduction, the mechanism
    //is reduced before solving the ode including only
    //the active species
    if (DAC_) mechRed_->reduceMechanism(c, Ti, pi);
    //reduceMechCpuTime_ += clockTime_.timeIncrement();

    while(timeLeft > SMALL)
    {
        nDIResidentCells++;
        nDI_++;
        if (DAC_)
        {
            //The complete set of molar concentration is used even if only active species are updated

            completeC_ = c;

            tauC = this->solver().solve(simplifiedC_, Ti, pi, t, dt);

            for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
        }
        else
        {
            //Without dynamic reduction, the ode is directly solved
            //including all the species specified in the mechanism

            //the value of c is updated in the solve function of the chemistrySolverTDAC
            tauC = this->solver().solve(c, Ti, pi, t, dt);
        }

        t += dt;

        // update the temperature
        cTot = sum(c);

        ThermoType mixture(0.0*this->specieThermo()[0]);
        for(label i=0; i<completeC_.size(); i++)
        {
            mixture += (c[i]/cTot)*this->specieThermo()[i];
        }
        Ti = mixture.TH(hi, Ti);

        timeLeft -= dt;
        this->deltaTChem()[celli] = tauC;
        dt = min(timeLeft, tauC);
        dt = max(dt, SMALL);
    }

    if (DAC_)
    {
        //after solving the number of species should be set back to the total number
        nSpecie_ = mechRed_->nSpecie();
        nNsDAC_++;
        meanNsDAC_+=NsDAC();
        //extend the array of active species to the full composition space
        for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
    }

    deltaTMin = min(tauC, deltaTMin);

    //Rphiq array store the mapping of the query point
    scalarField Rphiq(this->nSpecie());
    //Transform c array containing the mapping in molar concentration [mol/m3]
    //to Rphiq array in mass fraction
    for(label i=0; i<this->nSpecie(); i++)
    {
        Rphiq[i] = c[i]/rhoi*Wi[i];
    }
    DICpuTime_ += DIClock_.timeIncrement();

    //check if the mapping is in the region of accurate linear interpolation
    //GROW (the grow operation is done in the checkSolution function)
    GrowClock_.timeIncrement();
    if(tabPtr_->grow(phi0, phiq, Rphiq))
    {

        isatUsage_[celli]=1.0;
        GrowthCpuTime_ += GrowClock_.timeIncrement();
        nGrown_ ++;
    }
    //ADD if the growth failed, a new leaf is created and added to the binary tree
    else if(normalisedGradT[celli]>=ratio_)
    {
        isatUsage_[celli]=-1.0;
        nFlameSurfaceNodes_++;
    }
    else
    {
        isatUsage_[celli]=0.0;
        nAdd_ ++;
        AddClock_.timeIncrement();
        //Compute the mapping gradient matrix
        //Only computed with an add operation to avoid
        //computing it each time
        label Asize = this->nEqns();
        if (DAC_) Asize = NsDAC_+2;
        List<List<scalar> > A(Asize, List<scalar>(Asize,0.0));
        scalarField Rcq(this->nEqns());
        scalarField cq(this->nSpecie());
        for (label i=0; i<this->nSpecie(); i++)
        {
            Rcq[i] = rhoi*Rphiq[i]*invWi[i];
            cq[i] = rhoi*phiq[i]*invWi[i];
        }
        Rcq[this->nSpecie()]=Ti;
        Rcq[this->nSpecie()+1]=pi;
        computeA(A, Rcq, cq, t0, deltaT, Wi, rhoi);
        //add the new leaf which will contain phiq, R(phiq) and A(phiq)
        //replace the leaf containing phi0 by a node splitting the
        //composition space between phi0 and phiq (phi0 contains a reference to the node)
        tabPtr_->add(phiq, Rphiq, A, phi0, this->nEqns());
        addNewLeafCpuTime_ += AddClock_.timeIncrement();
    }


    //Compute the rate of reaction according to dc=c-c0
    //In the CFD solver the following equation is solved:
    //d(Yi*rho)/dt +convection+diffusion = RR*turbulentCoeff(=1 if not used)
    //Therefore, the unit of RR should be [kg/(m3.s)]
    scalarField dc = c - c0;
    for(label i=0; i<this->nSpecie(); i++)
    {
        this->RR()[i][celli] = dc[i]*Wi[i]/deltaT;
    }

    //cellTime_[celli]=clockTime7_.timeIncrement();
}//END if iterator==1
else
{

    //cellTime_[celli]=clockTime7_.timeIncrement();
    isatUsage_[celli]=-2.0;
    ss++;
    cellIDsTot[Pstream::myProcNo()].setSize(ss);
    cellIDsTot[Pstream::myProcNo()][ss-1]=celli;
    totcellTime[Pstream::myProcNo()].setSize(ss);
    totcellTime[Pstream::myProcNo()][ss-1]=cellTime_[celli];
}
//Pout<<"cellTime cell "<<celli<<" = "<<cellTime_[celli]<<endl;
//cellTime_[celli]=0;
