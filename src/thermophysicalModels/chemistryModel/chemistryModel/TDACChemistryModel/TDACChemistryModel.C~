/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2016-2017 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "TDACChemistryModel.H"
#include "UniformField.H"
#include "localEulerDdtScheme.H"
#include "clockTime.H"
#include "mpi.h"

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class CompType, class ThermoType>
Foam::TDACChemistryModel<CompType, ThermoType>::TDACChemistryModel
(
    const fvMesh& mesh,
    const word& phaseName
)
:
    chemistryModel<CompType, ThermoType>(mesh, phaseName),
    variableTimeStep_
    (
        mesh.time().controlDict().lookupOrDefault("adjustTimeStep", false)
     || fv::localEulerDdt::enabled(mesh)
    ),
    timeSteps_(0),
    NsDAC_(this->nSpecie_),
    completeC_(this->nSpecie_, 0),
    reactionsDisabled_(this->reactions_.size(), false),
    specieComp_(this->nSpecie_),
    completeToSimplifiedIndex_(this->nSpecie_, -1),
    simplifiedToCompleteIndex_(this->nSpecie_),
    tabulationResults_
    (
        IOobject
        (
            "TabulationResults",
            this->time().timeName(),
            this->mesh(),
            IOobject::NO_READ,
            IOobject::AUTO_WRITE
        ),
        mesh,
        scalar(0)
    ),
    cellTime_
    (
    	IOobject
        (
            "cellTime",
            this->time().timeName(),
            this->mesh(),
            IOobject::NO_READ,
            IOobject::AUTO_WRITE
        ),
        mesh,
        scalar(0)
    )
{
    basicMultiComponentMixture& composition = this->thermo().composition();

    // Store the species composition according to the species index
    speciesTable speciesTab = composition.species();

    const HashTable<List<specieElement>>& specComp =
        dynamicCast<const reactingMixture<ThermoType>&>(this->thermo())
       .specieComposition();

    forAll(specieComp_, i)
    {
        specieComp_[i] = specComp[this->Y()[i].name()];
    }

    mechRed_ = chemistryReductionMethod<CompType, ThermoType>::New
    (
        *this,
        *this
    );

    // When the mechanism reduction method is used, the 'active' flag for every
    // species should be initialized (by default 'active' is true)
    if (mechRed_->active())
    {
        forAll(this->Y(), i)
        {
            IOobject header
            (
                this->Y()[i].name(),
                mesh.time().timeName(),
                mesh,
                IOobject::NO_READ
            );

            // Check if the species file is provided, if not set inactive
            // and NO_WRITE
            if (!header.typeHeaderOk<volScalarField>(true))
            {
                composition.setInactive(i);
                this->Y()[i].writeOpt() = IOobject::NO_WRITE;
            }
        }
    }

    tabulation_ = chemistryTabulationMethod<CompType, ThermoType>::New
    (
        *this,
        *this
    );

    if (mechRed_->log())
    {
        cpuReduceFile_ = logFile("cpu_reduce.out");
        nActiveSpeciesFile_ = logFile("nActiveSpecies.out");
    }

    if (tabulation_->log())
    {
        cpuAddFile_ = logFile("cpu_add.out");
        cpuGrowFile_ = logFile("cpu_grow.out");
        cpuRetrieveFile_ = logFile("cpu_retrieve.out");
    }

    if (mechRed_->log() || tabulation_->log())
    {
        cpuSolveFile_ = logFile("cpu_solve.out");
    }
}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

template<class CompType, class ThermoType>
Foam::TDACChemistryModel<CompType, ThermoType>::~TDACChemistryModel()
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::omega
(
    const scalarField& c, // Contains all species even when mechRed is active
    const scalar T,
    const scalar p,
    scalarField& dcdt
) const
{
    const bool reduced = mechRed_->active();

    scalar pf, cf, pr, cr;
    label lRef, rRef;

    dcdt = Zero;

    forAll(this->reactions_, i)
    {
        if (!reactionsDisabled_[i])
        {
            const Reaction<ThermoType>& R = this->reactions_[i];

            scalar omegai = omega
            (
                R, c, T, p, pf, cf, lRef, pr, cr, rRef
            );

            forAll(R.lhs(), s)
            {
                label si = R.lhs()[s].index;
                if (reduced)
                {
                    si = completeToSimplifiedIndex_[si];
                }

                const scalar sl = R.lhs()[s].stoichCoeff;
                dcdt[si] -= sl*omegai;
            }
            forAll(R.rhs(), s)
            {
                label si = R.rhs()[s].index;
                if (reduced)
                {
                    si = completeToSimplifiedIndex_[si];
                }

                const scalar sr = R.rhs()[s].stoichCoeff;
                dcdt[si] += sr*omegai;
            }
        }
    }
}


template<class CompType, class ThermoType>
Foam::scalar Foam::TDACChemistryModel<CompType, ThermoType>::omega
(
    const Reaction<ThermoType>& R,
    const scalarField& c, // Contains all species even when mechRed is active
    const scalar T,
    const scalar p,
    scalar& pf,
    scalar& cf,
    label& lRef,
    scalar& pr,
    scalar& cr,
    label& rRef
) const
{
    const scalar kf = R.kf(p, T, c);
    const scalar kr = R.kr(kf, p, T, c);

    const label Nl = R.lhs().size();
    const label Nr = R.rhs().size();

    label slRef = 0;
    lRef = R.lhs()[slRef].index;

    pf = kf;
    for (label s=1; s<Nl; s++)
    {
        const label si = R.lhs()[s].index;

        if (c[si] < c[lRef])
        {
            const scalar exp = R.lhs()[slRef].exponent;
            pf *= pow(max(0.0, c[lRef]), exp);
            lRef = si;
            slRef = s;
        }
        else
        {
            const scalar exp = R.lhs()[s].exponent;
            pf *= pow(max(0.0, c[si]), exp);
        }
    }
    cf = max(0.0, c[lRef]);

    {
        const scalar exp = R.lhs()[slRef].exponent;
        if (exp < 1)
        {
            if (cf > SMALL)
            {
                pf *= pow(cf, exp - 1);
            }
            else
            {
                pf = 0;
            }
        }
        else
        {
            pf *= pow(cf, exp - 1);
        }
    }

    label srRef = 0;
    rRef = R.rhs()[srRef].index;

    // Find the matrix element and element position for the rhs
    pr = kr;
    for (label s=1; s<Nr; s++)
    {
        const label si = R.rhs()[s].index;
        if (c[si] < c[rRef])
        {
            const scalar exp = R.rhs()[srRef].exponent;
            pr *= pow(max(0.0, c[rRef]), exp);
            rRef = si;
            srRef = s;
        }
        else
        {
            const scalar exp = R.rhs()[s].exponent;
            pr *= pow(max(0.0, c[si]), exp);
        }
    }
    cr = max(0.0, c[rRef]);

    {
        const scalar exp = R.rhs()[srRef].exponent;
        if (exp < 1)
        {
            if (cr>SMALL)
            {
                pr *= pow(cr, exp - 1);
            }
            else
            {
                pr = 0;
            }
        }
        else
        {
            pr *= pow(cr, exp - 1);
        }
    }

    return pf*cf - pr*cr;
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::derivatives
(
    const scalar time,
    const scalarField& c,
    scalarField& dcdt
) const
{
    const bool reduced = mechRed_->active();

    const scalar T = c[this->nSpecie_];
    const scalar p = c[this->nSpecie_ + 1];

    if (reduced)
    {
        // When using DAC, the ODE solver submit a reduced set of species the
        // complete set is used and only the species in the simplified mechanism
        // are updated
        this->c_ = completeC_;

        // Update the concentration of the species in the simplified mechanism
        // the other species remain the same and are used only for third-body
        // efficiencies
        for (label i=0; i<NsDAC_; i++)
        {
            this->c_[simplifiedToCompleteIndex_[i]] = max(0.0, c[i]);
        }
    }
    else
    {
        for (label i=0; i<this->nSpecie(); i++)
        {
            this->c_[i] = max(0.0, c[i]);
        }
    }

    omega(this->c_, T, p, dcdt);

    // Constant pressure
    // dT/dt = ...
    scalar rho = 0;
    for (label i=0; i<this->c_.size(); i++)
    {
        const scalar W = this->specieThermo_[i].W();
        rho += W*this->c_[i];
    }

    scalar cp = 0;
    for (label i=0; i<this->c_.size(); i++)
    {
        // cp function returns [J/(kmol K)]
        cp += this->c_[i]*this->specieThermo_[i].cp(p, T);
    }
    cp /= rho;

    // When mechanism reduction is active
    // dT is computed on the reduced set since dcdt is null
    // for species not involved in the simplified mechanism
    scalar dT = 0;
    for (label i=0; i<this->nSpecie_; i++)
    {
        label si;
        if (reduced)
        {
            si = simplifiedToCompleteIndex_[i];
        }
        else
        {
            si = i;
        }

        // ha function returns [J/kmol]
        const scalar hi = this->specieThermo_[si].ha(p, T);
        dT += hi*dcdt[i];
    }
    dT /= rho*cp;

    dcdt[this->nSpecie_] = -dT;

    // dp/dt = ...
    dcdt[this->nSpecie_ + 1] = 0;
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::jacobian
(
    const scalar t,
    const scalarField& c,
    scalarSquareMatrix& dfdc
) const
{
    const bool reduced = mechRed_->active();

    // If the mechanism reduction is active, the computed Jacobian
    // is compact (size of the reduced set of species)
    // but according to the informations of the complete set
    // (i.e. for the third-body efficiencies)

    const scalar T = c[this->nSpecie_];
    const scalar p = c[this->nSpecie_ + 1];

    if (reduced)
    {
        this->c_ = completeC_;
        for (label i=0; i<NsDAC_; i++)
        {
            this->c_[simplifiedToCompleteIndex_[i]] = max(0.0, c[i]);
        }
    }
    else
    {
        forAll(this->c_, i)
        {
            this->c_[i] = max(c[i], 0.0);
        }
    }

    dfdc = Zero;

    forAll(this->reactions_, ri)
    {
        if (!reactionsDisabled_[ri])
        {
            const Reaction<ThermoType>& R = this->reactions_[ri];

            const scalar kf0 = R.kf(p, T, this->c_);
            const scalar kr0 = R.kr(kf0, p, T, this->c_);

            forAll(R.lhs(), j)
            {
                label sj = R.lhs()[j].index;
                if (reduced)
                {
                    sj = completeToSimplifiedIndex_[sj];
                }
                scalar kf = kf0;
                forAll(R.lhs(), i)
                {
                    const label si = R.lhs()[i].index;
                    const scalar el = R.lhs()[i].exponent;
                    if (i == j)
                    {
                        if (el < 1)
                        {
                            if (this->c_[si] > SMALL)
                            {
                                kf *= el*pow(this->c_[si] + VSMALL, el - 1);
                            }
                            else
                            {
                                kf = 0;
                            }
                        }
                        else
                        {
                            kf *= el*pow(this->c_[si], el - 1);
                        }
                    }
                    else
                    {
                        kf *= pow(this->c_[si], el);
                    }
                }

                forAll(R.lhs(), i)
                {
                    label si = R.lhs()[i].index;
                    if (reduced)
                    {
                        si = completeToSimplifiedIndex_[si];
                    }
                    const scalar sl = R.lhs()[i].stoichCoeff;
                    dfdc(si, sj) -= sl*kf;
                }
                forAll(R.rhs(), i)
                {
                    label si = R.rhs()[i].index;
                    if (reduced)
                    {
                        si = completeToSimplifiedIndex_[si];
                    }
                    const scalar sr = R.rhs()[i].stoichCoeff;
                    dfdc(si, sj) += sr*kf;
                }
            }

            forAll(R.rhs(), j)
            {
                label sj = R.rhs()[j].index;
                if (reduced)
                {
                    sj = completeToSimplifiedIndex_[sj];
                }
                scalar kr = kr0;
                forAll(R.rhs(), i)
                {
                    const label si = R.rhs()[i].index;
                    const scalar er = R.rhs()[i].exponent;
                    if (i == j)
                    {
                        if (er < 1)
                        {
                            if (this->c_[si] > SMALL)
                            {
                                kr *= er*pow(this->c_[si] + VSMALL, er - 1);
                            }
                            else
                            {
                                kr = 0;
                            }
                        }
                        else
                        {
                            kr *= er*pow(this->c_[si], er - 1);
                        }
                    }
                    else
                    {
                        kr *= pow(this->c_[si], er);
                    }
                }

                forAll(R.lhs(), i)
                {
                    label si = R.lhs()[i].index;
                    if (reduced)
                    {
                        si = completeToSimplifiedIndex_[si];
                    }
                    const scalar sl = R.lhs()[i].stoichCoeff;
                    dfdc(si, sj) += sl*kr;
                }
                forAll(R.rhs(), i)
                {
                    label si = R.rhs()[i].index;
                    if (reduced)
                    {
                        si = completeToSimplifiedIndex_[si];
                    }
                    const scalar sr = R.rhs()[i].stoichCoeff;
                    dfdc(si, sj) -= sr*kr;
                }
            }
        }
    }

    // Calculate the dcdT elements numerically
    const scalar delta = 1e-3;

    omega(this->c_, T + delta, p, this->dcdt_);
    for (label i=0; i<this->nSpecie_; i++)
    {
        dfdc(i, this->nSpecie_) = this->dcdt_[i];
    }

    omega(this->c_, T - delta, p, this->dcdt_);
    for (label i=0; i<this->nSpecie_; i++)
    {
        dfdc(i, this->nSpecie_) =
            0.5*(dfdc(i, this->nSpecie_) - this->dcdt_[i])/delta;
    }

    dfdc(this->nSpecie_, this->nSpecie_) = 0;
    dfdc(this->nSpecie_ + 1, this->nSpecie_) = 0;
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::jacobian
(
    const scalar t,
    const scalarField& c,
    scalarField& dcdt,
    scalarSquareMatrix& dfdc
) const
{
    jacobian(t, c, dfdc);

    const scalar T = c[this->nSpecie_];
    const scalar p = c[this->nSpecie_ + 1];

    // Note: Uses the c_ field initialized by the call to jacobian above
    omega(this->c_, T, p, dcdt);
}


template<class CompType, class ThermoType>
template<class DeltaTType>
Foam::scalar Foam::TDACChemistryModel<CompType, ThermoType>::solve
(
    const DeltaTType& deltaT
)
{

    // Increment counter of time-step
    timeSteps_++;

    const bool reduced = mechRed_->active();

    label nAdditionalEqn = (tabulation_->variableTimeStep() ? 1 : 0);

    basicMultiComponentMixture& composition = this->thermo().composition();

    // CPU time analysis
    const clockTime clockTime_= clockTime();
    clockTime_.timeIncrement();
    scalar reduceMechCpuTime_ = 0;
    scalar addNewLeafCpuTime_ = 0;
    scalar growCpuTime_ = 0;
    scalar solveChemistryCpuTime_ = 0;
    scalar searchISATCpuTime_ = 0;
    
    const clockTime clockTime_cellTime= clockTime();

    this->resetTabulationResults();

    // Average number of active species
    scalar nActiveSpecies = 0;
    scalar nAvg = 0;

    CompType::correct();

    scalar deltaTMin = GREAT;

    if (!this->chemistry_)
    {
        return deltaTMin;
    }

    const volScalarField rho
    (
        IOobject
        (
            "rho",
            this->time().timeName(),
            this->mesh(),
            IOobject::NO_READ,
            IOobject::NO_WRITE,
            false
        ),
        this->thermo().rho()
    );
    //Random access to mesh cells to avoid problem using ISAT
    labelList cellIndexTmp = identity(rho.size());//cellIndexTmp[i]=i
    Random randGenerator(unsigned(time(NULL)));
    label j;
    for (label i=0; i<rho.size(); i++)
    {
        j=randGenerator.integer(i,rho.size()-1);
        label tmp = cellIndexTmp[i];
        cellIndexTmp[i] = cellIndexTmp[j];
        cellIndexTmp[j] = tmp;
    }
    if(tabulation_->active() && tabulation_->loadBalance() && timeSteps_<=tabulation_->numberOfInitDI())
    {
    	Info<<"solve without ISAT because of number of time steps is below the limit"<<endl;
    	#include "solveWithoutIsat.H"
    }
    if(tabulation_->active() && tabulation_->loadBalance()  && timeSteps_>tabulation_->numberOfInitDI())
    {	
		if(tabulation_->distributionType()=="URAN")
		{
			Info<<"solve in parallel ISAT mode URAN"<<endl;
			#include "URAN.H"
		}
		else//PDist will be used
		{
			Info<<"solve in parallel ISAT mode PDist"<<endl;
			#include "PDist.H"
		}
    }
    if(tabulation_->active() && !tabulation_->loadBalance() && timeSteps_<=tabulation_->numberOfInitDI())
    {
    	Info<<"solve without ISAT because of number of time steps is below the limit"<<endl;
       	#include "solveWithoutIsat.H"
    }
    if(tabulation_->active() && !tabulation_->loadBalance() && timeSteps_>tabulation_->numberOfInitDI())
    {
    	Info<<"solve in PLP mode"<<endl;
        #include "solvePLPISAT.H"
    }
    if(!tabulation_->active() )
    {
    	Info<<"solve without ISAT"<<endl;
        #include "solveWithoutIsat.H"
    }
/*
    const scalarField& T = this->thermo().T();
    const scalarField& p = this->thermo().p();

    scalarField c(this->nSpecie_);
    scalarField c0(this->nSpecie_);

    // Composition vector (Yi, T, p)
    scalarField phiq(this->nEqns() + nAdditionalEqn);

    scalarField Rphiq(this->nEqns() + nAdditionalEqn);

    forAll(rho, celli)
    {
        const scalar rhoi = rho[celli];
        scalar pi = p[celli];
        scalar Ti = T[celli];

        for (label i=0; i<this->nSpecie_; i++)
        {
            c[i] = rhoi*this->Y_[i][celli]/this->specieThermo_[i].W();
            c0[i] = c[i];
            phiq[i] = this->Y()[i][celli];
        }
        phiq[this->nSpecie()]=Ti;
        phiq[this->nSpecie() + 1]=pi;
        if (tabulation_->variableTimeStep())
        {
            phiq[this->nSpecie() + 2] = deltaT[celli];
        }


        // Initialise time progress
        scalar timeLeft = deltaT[celli];

        // Not sure if this is necessary
        Rphiq = Zero;

        clockTime_.timeIncrement();

        // When tabulation is active (short-circuit evaluation for retrieve)
        // It first tries to retrieve the solution of the system with the
        // information stored through the tabulation method
        if (tabulation_->active() && tabulation_->retrieve(phiq, Rphiq))
        {
            // Retrieved solution stored in Rphiq
            for (label i=0; i<this->nSpecie(); i++)
            {
                c[i] = rhoi*Rphiq[i]/this->specieThermo_[i].W();
            }

            searchISATCpuTime_ += clockTime_.timeIncrement();
        }
        // This position is reached when tabulation is not used OR
        // if the solution is not retrieved.
        // In the latter case, it adds the information to the tabulation
        // (it will either expand the current data or add a new stored point).
        else
        {
            // Store total time waiting to attribute to add or grow
            scalar timeTmp = clockTime_.timeIncrement();

            if (reduced)
            {
                // Reduce mechanism change the number of species (only active)
                mechRed_->reduceMechanism(c, Ti, pi);
                nActiveSpecies += mechRed_->NsSimp();
                nAvg++;
                scalar timeIncr = clockTime_.timeIncrement();
                reduceMechCpuTime_ += timeIncr;
                timeTmp += timeIncr;
            }

            // Calculate the chemical source terms
            while (timeLeft > SMALL)
            {
                scalar dt = timeLeft;
                if (reduced)
                {
                    // completeC_ used in the overridden ODE methods
                    // to update only the active species
                    completeC_ = c;

                    // Solve the reduced set of ODE
                    this->solve
                    (
                        simplifiedC_, Ti, pi, dt, this->deltaTChem_[celli]
                    );

                    for (label i=0; i<NsDAC_; i++)
                    {
                        c[simplifiedToCompleteIndex_[i]] = simplifiedC_[i];
                    }
                }
                else
                {
                    this->solve(c, Ti, pi, dt, this->deltaTChem_[celli]);
                }
                timeLeft -= dt;
            }

            {
                scalar timeIncr = clockTime_.timeIncrement();
                solveChemistryCpuTime_ += timeIncr;
                timeTmp += timeIncr;
            }

            // If tabulation is used, we add the information computed here to
            // the stored points (either expand or add)
            if (tabulation_->active())
            {
                forAll(c, i)
                {
                    Rphiq[i] = c[i]/rhoi*this->specieThermo_[i].W();
                }
                if (tabulation_->variableTimeStep())
                {
                    Rphiq[Rphiq.size()-3] = Ti;
                    Rphiq[Rphiq.size()-2] = pi;
                    Rphiq[Rphiq.size()-1] = deltaT[celli];
                }
                else
                {
                    Rphiq[Rphiq.size()-2] = Ti;
                    Rphiq[Rphiq.size()-1] = pi;
                }
                label growOrAdd =
                    tabulation_->add(phiq, Rphiq, rhoi, deltaT[celli]);
                if (growOrAdd)
                {
                    this->setTabulationResultsAdd(celli);
                    addNewLeafCpuTime_ += clockTime_.timeIncrement() + timeTmp;
                }
                else
                {
                    this->setTabulationResultsGrow(celli);
                    growCpuTime_ += clockTime_.timeIncrement() + timeTmp;
                }
            }

            // When operations are done and if mechanism reduction is active,
            // the number of species (which also affects nEqns) is set back
            // to the total number of species (stored in the mechRed object)
            if (reduced)
            {
                this->nSpecie_ = mechRed_->nSpecie();
            }
            deltaTMin = min(this->deltaTChem_[celli], deltaTMin);
        }

        // Set the RR vector (used in the solver)
        for (label i=0; i<this->nSpecie_; i++)
        {
            this->RR_[i][celli] =
                (c[i] - c0[i])*this->specieThermo_[i].W()/deltaT[celli];
        }
    }
*/
    if (mechRed_->log() || tabulation_->log())
    {
        cpuSolveFile_()
            << this->time().timeOutputValue()
            << "    " << solveChemistryCpuTime_ << endl;
    }

    if (mechRed_->log())
    {
        cpuReduceFile_()
            << this->time().timeOutputValue()
            << "    " << reduceMechCpuTime_ << endl;
    }

    if (tabulation_->active())
    {
        // Every time-step, look if the tabulation should be updated
        tabulation_->update();

        // Write the performance of the tabulation
        tabulation_->writePerformance();

        if (tabulation_->log())
        {
            cpuRetrieveFile_()
                << this->time().timeOutputValue()
                << "    " << searchISATCpuTime_ << endl;

            cpuGrowFile_()
                << this->time().timeOutputValue()
                << "    " << growCpuTime_ << endl;

            cpuAddFile_()
                << this->time().timeOutputValue()
                << "    " << addNewLeafCpuTime_ << endl;
        }
    }

    if (reduced && nAvg && mechRed_->log())
    {
        // Write average number of species
        nActiveSpeciesFile_()
            << this->time().timeOutputValue()
            << "    " << nActiveSpecies/nAvg << endl;
    }

    if (Pstream::parRun())
    {
        List<bool> active(composition.active());
        Pstream::listCombineGather(active, orEqOp<bool>());
        Pstream::listCombineScatter(active);

        forAll(active, i)
        {
            if (active[i])
            {
                composition.setActive(i);
            }
        }
    }

    forAll(this->Y(), i)
    {
        if (composition.active(i))
        {
            this->Y()[i].writeOpt() = IOobject::AUTO_WRITE;
        }
    }

    return deltaTMin;
}


template<class CompType, class ThermoType>
Foam::scalar Foam::TDACChemistryModel<CompType, ThermoType>::solve
(
    const scalar deltaT
)
{
    // Don't allow the time-step to change more than a factor of 2
    return min
    (
        this->solve<UniformField<scalar>>(UniformField<scalar>(deltaT)),
        2*deltaT
    );
}


template<class CompType, class ThermoType>
Foam::scalar Foam::TDACChemistryModel<CompType, ThermoType>::solve
(
    const scalarField& deltaT
)
{
    return this->solve<scalarField>(deltaT);
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::setTabulationResultsAdd
(
    const label celli
)
{
    tabulationResults_[celli] = 0.0;
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::setTabulationResultsGrow
(
    const label celli
)
{
    tabulationResults_[celli] = 1.0;
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::
setTabulationResultsRetrieve
(
    const label celli
)
{
    tabulationResults_[celli] = 2.0;
}

template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::setTabulationResultsDistributed
(
    const label celli
)
{
    tabulationResults_[celli] = 3.0;
}


template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::x2f_uran_p
	( 	
		label &nproc, 
		//label mpicomm, 
		label &myrank, 
		label &ntogo, 
		label &nv, 
		List<label> & p1, 
		List<label> & n_incoming, 
		List<label> & n_outgoing 
	)
{

	label n_offset=0;
	List<label> active_pool(nproc,0);
	int j_pick=0;
	int p_pick=0;
	// Start by figuring out how many cells will go to each of the other processes.
	// n_outgoing(j) is the number of cells that are destined for process j.
	// It is logical to initialize it ntogo/nproc (which could be zero), for all j.
	// But there could be some cells left over...
	label msgsize = ntogo / nproc;
	forAll(n_outgoing,pi) n_outgoing[pi]=msgsize;
	label n_left = ntogo - msgsize * nproc;
	
	//Now figure out which processes get the leftovers.  Global communication is needed.
	// To spread the leftovers evenly, single cells are assigned to sequential ranks.
	// On rank 0, the starting point of the sequence is 1 plus a random offset < nproc.
	// For higher ranks, the starting point is found through the "prefix sum" of n_left.
	// This is the sum of leftovers on ranks < myrank.  We use MPI_Scan to compute this.
	// It gives the rank (modulo nproc) of the last process to be assigned a cell.
	// The random offset is necessary to ensure leftover cells do not keep returning
	// to the same range of ranks each time this routine is called.

	label n_left_prfsum=0;
	
	if(myrank==0)
	{
		//F. call random_number( roffset )
		//We want a random number btw 0 and nproc-1
		Random randGenerator(unsigned(time(NULL)));
		n_offset=randGenerator.integer(0,nproc-1);//check this
		n_left += n_offset;
	}
		
		
	MPI_Scan( &n_left, &n_left_prfsum, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
	if ( myrank == 0 )
	{
		// remove offset after calculating prefix sum
		n_left = n_left - n_offset;  
	}
	// We want the prefix sum to include only the lower ranks, excluding the current rank;
	//on all ranks, the prefix sum will retain the random offset.
	n_left_prfsum = n_left_prfsum - n_left;
	
	//this should be implementaed
	//call iuranwor2( msgsize, nproc, n_left, n_left_prfsum, n_outgoing )
	//for the moment easy implementation is used
	
iuranwor2( msgsize, nproc, n_left, n_left_prfsum, n_outgoing );
	
	// At this point, all processes know n_outgoing, so an all-to-all determines n_incoming
	MPI_Alltoall( reinterpret_cast<char*>(n_outgoing.begin()), 1, MPI_INT, reinterpret_cast<char*>(n_incoming.begin()), 1, MPI_INT, MPI_COMM_WORLD );
	
	// All that's left to do is to assign the exact cells that are going to each process.
	// Imagine drawing processor assignments one at a time out of a pool of slips of paper.
	// The slips are numbered 1 to nproc.  A slip is replaced in the pool after it is drawn.
	// But: after some number j has been drawn n_outgoing(j) times, we must remove its slip.
	// pool_count(j) tells us how many more times a given number j is allowed to be drawn...
	
	List<label> pool_count(nproc,0);
	forAll(pool_count,pi) pool_count[pi]=n_outgoing[pi];
	
	// pool_count(j) goes down by one each time j is drawn.  As drawing continues, it will
	// eventually reach zero for some j.  When that occurs, total_active is reduced by 1,
	// and active_pool is rearranged so that active_pool(k) /= j for k in 1:total_active.
	// In the usual case, nv > ntogo > nproc.  We therefore start with total_active = nproc
	// and active_pool(j) = j.  But we also want to handle situations where ntogo < nproc.
	// That means some slips will not be present in the pool from the start:

	
	label total_active = 0;
	for(int j=0;j<nproc;j++)
	{
		if(n_outgoing[j] != 0)
		{
			total_active = total_active + 1;
			active_pool[total_active-1] = j;
		}
	}
	for(int i=0;i<nv;i++)
	{
		if(p1[i] == -1)
		{
			//Random randGenerator(unsigned(time(NULL)));
			Random randGenerator(123*(myrank+1)+7*(i+1)*unsigned(time(NULL)));
			j_pick=randGenerator.integer(0,total_active-1);//check this
			p_pick = active_pool[j_pick];
			pool_count[p_pick] = pool_count[p_pick] - 1;
			if( pool_count[p_pick] == 0 )
			{
				if( j_pick != total_active-1 )
				{
					//move an active pool number from the last slot to the newly empty slot
					active_pool[j_pick] = active_pool[total_active-1];
				}
				total_active = total_active - 1;
			}
			p1[i] = p_pick;	    
		}			
	}
	
	//should be implemented
	//call random_seed( get = seednum(1:seedsize) )
	//call random_seed( put = seed_on_entry(1:seedsize) )
}

template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::iuranwor2
	( 	
		label &msgsize,
		label &nproc, 
		label &nleft,
		label &nleftpsum,		
		List<label> & n_outgoing 
	)
{
	/*label nwraps=nleftpsum/nproc;
	label nleft_sub= nleftpsum - nwraps*nproc;
	if (nleft_sub+nleft <= nproc)
	{
		n_outgoing(nleft_sub+1:nleft_sub+nleft) = msgsize + 1
	}
	else
	{
		n_outgoing(nleft_sub+1:nproc) = msgsize + 1
		n_outgoing(1:nleft-(nproc-nleft_sub)) = msgsize + 1
	}*/
	//easy c++ implementation by ALISH
	for(label pi=0;pi<nleft;pi++)
	{
		n_outgoing[pi]=msgsize+1;
	}
	
}

template<class CompType, class ThermoType>
void Foam::TDACChemistryModel<CompType, ThermoType>::bucket_sort
	( 	
		label &nlist,
		label &ld, 
		label &nelem,
		List<List<scalar> > & list ,
		List<label> &bucket_assigns,
		label &nbucket,
		List<label> &bucket_totals,
		List<label> & list_origplaces,
		List<label> & orig_slots
	)
{
		// Local variables:
		// bucket_end_pts(j) is the ending point of bucket j in final, sorted list
		// bucket_cur_pts(j) starts at bucket_end_pts(j-1)+1, moves up during sort
		// dimension is nbucket+1 due to extra, "bad" bucket at end of list
		List<label> bucket_cur_pts(nbucket+1,0);
		List<label> bucket_end_pts(nbucket+1,0);
		label total_all_good;
		label marker;
		label current_total;
		label jdest;
		label jup;
		label chainstart;
		label listplace;
		label nextmove;
		label backchain ;
		List<bool> done_bucket(nbucket+1,false);
		bool found_start;
		bool found_end;
		List<scalar> temp_vec(nelem,0.0);
		label temp_place=0;
		
		total_all_good = sum(bucket_totals);
		marker=0;
		for(label j=0;j<nbucket+1;j++)
		{
			if ( j < nbucket )
			{
				current_total = bucket_totals[j];
			}
			else
			{
				current_total = nlist - total_all_good;
			}
			if ( current_total == 0 ) done_bucket[j] = true;
			bucket_cur_pts[j] = marker;
			marker = marker + current_total;
			bucket_end_pts[j] = marker - 1;
		}
		forAll(orig_slots,i) orig_slots[i]=i;
		for(label j=0;j<nbucket + 1;j++)
		{			
// begin to plan the unique swap chain that starts in bucket j:
			// consider only places in bucket j that aren't yet done;
			// whole buckets can and will be skipped as the algorithm proceeds
			// scan for the next item out of place, if any, and start chain there
			found_start = false;
			while(! (found_start || done_bucket[j]))
			{
				chainstart = bucket_cur_pts[j];
				jdest = bucket_assigns[chainstart];
				if (  jdest < 0 ||  jdest > nbucket-1  ) jdest = nbucket ;
				if ( jdest != j ) found_start = true;
				bucket_cur_pts[j] = bucket_cur_pts[j] + 1;
				if ( bucket_cur_pts[j] > bucket_end_pts[j] ) done_bucket[j] = true;
				
			}
			if ( found_start )
			{
				listplace = chainstart;
				found_end = false;
				while(!found_end)
				{
					
					nextmove = bucket_cur_pts[jdest];
					if ( nextmove > bucket_end_pts[jdest] )
					{
						if ( jdest == j )
						{
							found_end = true;
						}
						else
						{
							Pout<<"bucket_sort: can''t move into bucket"<<jdest<<endl;
							//return 0;
break;
						}
					}
					else
					{
						jup = bucket_assigns[nextmove];
						if ( ( jup <0 ) || ( jup > nbucket-1 ) ) jup = nbucket ;
						if ( jup == jdest )
						{
							bucket_cur_pts[jdest] = bucket_cur_pts[jdest] + 1;
						}
						else
						{
							orig_slots[nextmove] = listplace;
							listplace = nextmove;
							bucket_cur_pts[jdest] = bucket_cur_pts[jdest] + 1;
							 if ( bucket_cur_pts[jdest] > bucket_end_pts[jdest] ) 
							 {
								done_bucket[jdest] = true;
							 }
							 jdest = jup;
				  
							
						}
					}					
					
				}//end while
				forAll(temp_vec,celli) temp_vec[celli]=list[celli][chainstart];
				
				temp_place        = list_origplaces[chainstart];
				list_origplaces[chainstart] = list_origplaces[listplace];
				for(label ii=0;ii<nelem;ii++)
				{
					list[ii][chainstart]=list[ii][listplace];
				}
				
				orig_slots[chainstart] = listplace;
				backchain = orig_slots[listplace];
				while(backchain != chainstart)
				{
					for(label ii=0;ii<nelem;ii++)
					{
						list[ii][listplace]=list[ii][backchain];
					}
					
					list_origplaces[listplace] = list_origplaces[backchain];
					listplace = backchain;
					backchain = orig_slots[listplace];
				}
				for(label ii=0;ii<nelem;ii++)
				{
					list[ii][listplace]=temp_vec[ii];
				}
				
				list_origplaces[listplace] = temp_place;
			}//end if ( found_start )			
			
		}//end for
		
		
}
//endali
// ************************************************************************* //
