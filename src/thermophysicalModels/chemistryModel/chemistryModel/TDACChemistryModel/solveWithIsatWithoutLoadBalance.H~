/*List<List<scalar> > maxQhiqAllProc(Pstream::nProcs(), List<scalar>(this->nSpecie()) );
	for(label i=0; i<this->nSpecie(); i++)
	{
		for(label j=0; j<Pstream::nProcs(); j++)
		{
			maxQhiqAllProc[j][i]=1e-9;
		}
	}
scalarField maxQhiq(this->nSpecie(),1e-9);
forAll(rho,celli)
{
    scalar rhoi = rho[celli];
    scalar Ti = this->thermo().T()[celli];
    scalar hi = this->thermo().hs()[celli] + hc[celli];
    scalar pi = this->thermo().p()[celli];

    scalarField phiq2(this->nEqns());
    for(label i=0; i<this->nSpecie(); i++)
    {
        phiq2[i] = this->Y()[i][celli];
    }
	for(label i=0; i<this->nSpecie(); i++)
	{
		if(phiq2[i]>=maxQhiqAllProc[Pstream::myProcNo()][i]) maxQhiqAllProc[Pstream::myProcNo()][i]=phiq2[i];
	}
}

Pstream::gatherList(maxQhiqAllProc);
if (Pstream::myProcNo() == Pstream::masterNo())
{
	for(label i=0; i<this->nSpecie(); i++)
	{
		for(label j=0; j<Pstream::nProcs(); j++)
		{
			if(maxQhiqAllProc[j][i]>=maxQhiq[i]) maxQhiq[i]=maxQhiqAllProc[j][i];
		}
	}
	for(int slave=Pstream::firstSlave();slave<=Pstream::lastSlave();slave++)
	{
		OPstream toSlave(Pstream::scheduled, slave);
		toSlave << maxQhiq;
	}
	//Pout<<"maxQhiq[iH]"<<maxQhiq[2]<<endl;
}
if (Pstream::myProcNo() != Pstream::masterNo())
{
	IPstream fromMaster(Pstream::scheduled, Pstream::masterNo());
	fromMaster >> maxQhiq;
}

label iH=0;
label iHO2=0;
for(label i=0; i<this->nSpecie(); i++)
{
	if (this->Y()[i].name()=="H") iH=i;
	if (this->Y()[i].name()=="HO2") iHO2=i;
}
//Pout<<"maxQhiq[iH]"<<maxQhiq[iH]<<endl;
//Pout<<"maxQhiqAllProc[Pstream::myProcNo()][iH]"<<maxQhiqAllProc[Pstream::myProcNo()][iH]<<endl;
//Pout<<"maxQhiq[iH2O2]"<<maxQhiq[iH2O2]<<endl;
//Pout<<"maxQhiqAllProc[Pstream::myProcNo()][iH2O2]"<<maxQhiqAllProc[Pstream::myProcNo()][iH2O2]<<endl;

if(maxQhiq[iH]<1e-7)
{
	for(label i=0; i<this->nSpecie()-1; i++)
	{

		if(this->Y()[i].name()=="H2O2" || this->Y()[i].name()=="HO2" || this->Y()[i].name()=="O" || this->Y()[i].name()=="H" || this->Y()[i].name()=="OH" ) 
		{tabPtr_->scaleFactor()[i]=maxQhiq[i];}
	}
}

else if (tabPtr_->scaleFactor()[iHO2]!=0.1 || tabPtr_->scaleFactor()[iHO2]!=1)
{
	
	for(label i=0; i<this->nSpecie()-1; i++)
	{
		tabPtr_->scaleFactor()[i]=0.1;
	}
	tabPtr_->clear();
	Pout<<"table cleared"<<endl;

}

*/

forAll(rho, ci)
//forAll(rho, celli)
{
    label celli(cellIndexTmp[ci]);

    scalar rhoi = rho[celli];
    scalar Ti = this->thermo().T()[celli];
    scalar hi = this->thermo().hs()[celli] + hc[celli];
    scalar pi = this->thermo().p()[celli];

    scalarField phiq(this->nEqns());
    for(label i=0; i<this->nSpecie(); i++)
    {
        phiq[i] = this->Y()[i][celli];
    }

    //Species are stored in mass fraction in the cells
    //c arrays indicate the molar concentration of the species
    // c = (Y * rho)/W [kmol/m3]
    //phiq array store the mass fraction, the temperature and pressure
    //(i.e. the composition) of the query point
    scalarField c(this->nSpecie());
    scalarField c0(this->nSpecie());
    for(label i=0; i<this->nSpecie(); i++)
    {
        c[i] = rhoi*phiq[i]*invWi[i];
    }
    phiq[this->nSpecie()]=Ti;
    phiq[this->nSpecie()+1]=pi;

    //store the initial molar concentration to compute dc=c-c0
    c0 = c;

    //time step and chemical time step
    scalar t = t0;
    scalar tauC = this->deltaTChem_[celli];
    scalar dt = min(deltaT, tauC);
    scalar timeLeft = deltaT;

    scalar cTot = 0.0;




    /*---------------------------------------------------------------------------*\
        Calculate the mapping of the query composition with the
        ISAT algorithm:
        1) phi0 the nearest point stored in the tree for a query point phiq
        according to the specific binary tree search (it is not
        guaranted that it is the best point to approximate phiq)
        2) check if phiq lies in the region of accurate linear interpolation
        of phi0, this region is approximated by an hyper-ellipsoid
        (ellipsoid of accuracy EOA)
        3) then there are three possible methods:
        ==>RETRIEVE
            -phiq is in the EOA -> the mapping of phiq is obtained by linear
            interp.: R(phiq)=phiq(t+dt)=R(phi0)+A(phi0)*(phiq-phi0),
            where A(phi0)=dR(phi0)/dphi is the mapping gradient matrix in phi0
        ==>GROW
            -phiq is not in the EOA but the mapping calculated by integrating
            the chemical equations is within the user-defined tolerance
            -> the EOA is grown in order to include the previous EOA and
            the query point phiq which ends up to be in the region of
            accuracy but not in its conservative approximation (i.e. EOA)
        ==>ADD
            -phiq is not in the region of accurate linear interpolation
            -> a new leaf is added to the tree to store the point phiq,
            the mapping R(phiq), the mapping gradient matrix A(phiq) and
            the specification of the ellipsoid of accuracy
    \*---------------------------------------------------------------------------*/
    retrieveClock_.timeIncrement();
    //phi0 will store the composition of the nearest stored point
    chemPointBase *phi0;

    //The tabulation algorithm try to retrieve the mapping
    if (tabPtr_->retrieve(phiq,phi0))
    {
		nFound_ ++;
		isatUsage_[celli]=2.0;
		//Rphiq array store the mapping of the query point
		scalarField Rphiq(this->nSpecie());
		scalarField RDphiq(this->nSpecie());
		tabPtr_->calcNewC(phi0, phiq, Rphiq);
		RetrieveCpuTime_+= retrieveClock_.timeIncrement();
		//Error Analysis
		if(nFound_%100==0 && computeMappingOrNot_)
		{
			epsilon8_=0;
			DIWOISATClock.timeIncrement();
			if (DAC_) mechRed_->reduceMechanism(c, Ti, pi);


			while(timeLeft > SMALL)
			{
				if (DAC_)
				{
					//The complete set of molar concentration is used even if only active species are updated

					completeC_ = c;

					tauC = this->solver().solve(simplifiedC_, Ti, pi, t, dt);

					for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
				}
				else
				{
					//Without dynamic reduction, the ode is directly solved
					//including all the species specified in the mechanism

					//the value of c is updated in the solve function of the chemistrySolverTDAC
					tauC = this->solver().solve(c, Ti, pi, t, dt);
				}

				t += dt;

				// update the temperature
				cTot = sum(c);

				ThermoType mixture(0.0*this->specieThermo()[0]);
				for(label i=0; i<completeC_.size(); i++)
				{
					mixture += (c[i]/cTot)*this->specieThermo()[i];
				}
				Ti = mixture.TH(hi, Ti);

				timeLeft -= dt;
				this->deltaTChem()[celli] = tauC;
				dt = min(timeLeft, tauC);
				dt = max(dt, SMALL);
		   }
			if (DAC_)
			{
				//after solving the number of species should be set back to the total number
				nSpecie_ = mechRed_->nSpecie();
				nNsDAC_++;
				meanNsDAC_+=NsDAC();
				//extend the array of active species to the full composition space
				for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
			}
			for(label i=0; i<this->nSpecie(); i++)
			{
				RDphiq[i] = c[i]/rhoi*Wi[i];
			}
			scalar maxEpsilon8=0;
			scalar epsilon8i=0;
			label directionMax=0;
			for(label i=0; i<this->nSpecie(); i++)
			{
				epsilon8_+=sqr((RDphiq[i]- Rphiq[i])/tabPtr_->scaleFactor()[i] );
				epsilon8i=sqr((RDphiq[i]- Rphiq[i])/tabPtr_->scaleFactor()[i] );
				if(maxEpsilon8>= epsilon8i) 
				{
					maxEpsilon8=epsilon8i;
					directionMax=i;
				}
			}
			epsilon8_=sqrt(epsilon8_);
			maxEpsilon8=sqrt(maxEpsilon8);
			if(maxEpsilon8>=1e-6) 
			{
				Pout<<"scale factor specie "<<directionMax<<" is decreased from "<<tabPtr_->scaleFactor()[directionMax]<< " to "<<tabPtr_->scaleFactor()[directionMax]*0.1<<endl;
				tabPtr_->scaleFactor()[directionMax]*=0.1;
			}
			//Info<< "Mapping Error="<<epsilon8_<<endl;
			mappingError<<epsilon8_<<endl;
			TDIWOISATStats<<runTime->timeOutputValue()<<token::TAB<<DIWOISATClock.timeIncrement()<<endl;
		}
		//end of error Analysis

        //Rphiq is in mass fraction, it is converted to molar
        //concentration to obtain c (used to compute RR)
        for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];
    }
    /*else if(tabPtr_->MFUretrieve(phiq,phi0))
    {
        nFound_ ++;
        isatUsage_[celli]=2.0;
        //Rphiq array store the mapping of the query point
        scalarField Rphiq(this->nSpecie());
        scalarField RDphiq(this->nSpecie());
        tabPtr_->calcNewC(phi0, phiq, Rphiq);
        for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];
    }
    else if(tabPtr_->MRUretrieve(phiq,phi0))
    {
        nFound_ ++;
        isatUsage_[celli]=2.0;
        //Rphiq array store the mapping of the query point
        scalarField Rphiq(this->nSpecie());
        scalarField RDphiq(this->nSpecie());
        tabPtr_->calcNewC(phi0, phiq, Rphiq);
        for (label i=0; i<this->nSpecie(); i++) c[i] = rhoi*Rphiq[i]*invWi[i];
    }*/


    //Retrieve has failed. The mapping is computed
    else
    {


        RetrieveCpuTime_+= retrieveClock_.timeIncrement();
        DIClock_.timeIncrement();

        //When using mechanism reduction, the mechanism
        //is reduced before solving the ode including only
        //the active species
        if (DAC_) mechRed_->reduceMechanism(c, Ti, pi);
        //reduceMechCpuTime_ += clockTime_.timeIncrement();

        while(timeLeft > SMALL)
        {
            nDI_++;
            if (DAC_)
            {
                //The complete set of molar concentration is used even if only active species are updated

                completeC_ = c;

                tauC = this->solver().solve(simplifiedC_, Ti, pi, t, dt);

                for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
            }
            else
            {
                //Without dynamic reduction, the ode is directly solved
                //including all the species specified in the mechanism

                //the value of c is updated in the solve function of the chemistrySolverTDAC
                tauC = this->solver().solve(c, Ti, pi, t, dt);
            }

            t += dt;

            // update the temperature
            cTot = sum(c);

            ThermoType mixture(0.0*this->specieThermo()[0]);
            for(label i=0; i<completeC_.size(); i++)
            {
                mixture += (c[i]/cTot)*this->specieThermo()[i];
            }
            Ti = mixture.TH(hi, Ti);

            timeLeft -= dt;
            this->deltaTChem()[celli] = tauC;
            dt = min(timeLeft, tauC);
            dt = max(dt, SMALL);
        }
        if (DAC_)
        {
            //after solving the number of species should be set back to the total number
            nSpecie_ = mechRed_->nSpecie();
            nNsDAC_++;
            meanNsDAC_+=NsDAC();
            //extend the array of active species to the full composition space
            for (label i=0; i<NsDAC(); i++)  c[simplifiedToCompleteIndex(i)] = simplifiedC_[i];
        }

        deltaTMin = min(tauC, deltaTMin);

        //Rphiq array store the mapping of the query point
        scalarField Rphiq(this->nSpecie());
        //Transform c array containing the mapping in molar concentration [mol/m3]
        //to Rphiq array in mass fraction
        for(label i=0; i<this->nSpecie(); i++)
        {
            Rphiq[i] = c[i]/rhoi*Wi[i];
        }
        DICpuTime_ += DIClock_.timeIncrement();

        //check if the mapping is in the region of accurate linear interpolation
        //GROW (the grow operation is done in the checkSolution function)
        GrowClock_.timeIncrement();
        if(tabPtr_->grow(phi0, phiq, Rphiq))
        {
            //commrntrd by ali//addNewLeafCpuTime_ += clockTime_.timeIncrement();
            isatUsage_[celli]=1.0;
            GrowthCpuTime_ += GrowClock_.timeIncrement();
            nGrown_ ++;
        }
        //ADD if the growth failed, a new leaf is created and added to the binary tree
        else if(normalisedGradT[celli]>=ratio_)
        {
            isatUsage_[celli]=-1.0;
            nFlameSurfaceNodes_++;
        }
        else if(normalisedGradT[celli]<ratio_)
        {
            isatUsage_[celli]=0.0;
            nAdd_ ++;
            AddClock_.timeIncrement();
            //Compute the mapping gradient matrix
            //Only computed with an add operation to avoid
            //computing it each time
            label Asize = this->nEqns();
            if (DAC_) Asize = NsDAC_+2;
            List<List<scalar> > A(Asize, List<scalar>(Asize,0.0));
            scalarField Rcq(this->nEqns());
            scalarField cq(this->nSpecie());
            for (label i=0; i<this->nSpecie(); i++)
            {
                Rcq[i] = rhoi*Rphiq[i]*invWi[i];
                cq[i] = rhoi*phiq[i]*invWi[i];
            }
            Rcq[this->nSpecie()]=Ti;
            Rcq[this->nSpecie()+1]=pi;
            computeA(A, Rcq, cq, t0, deltaT, Wi, rhoi);
            //add the new leaf which will contain phiq, R(phiq) and A(phiq)
            //replace the leaf containing phi0 by a node splitting the
            //composition space between phi0 and phiq (phi0 contains a reference to the node)
            tabPtr_->add(phiq, Rphiq, A, phi0, this->nEqns());
            addNewLeafCpuTime_ += AddClock_.timeIncrement();
        }
    }


    //Compute the rate of reaction according to dc=c-c0
    //In the CFD solver the following equation is solved:
    //d(Yi*rho)/dt +convection+diffusion = RR*turbulentCoeff(=1 if not used)
    //Therefore, the unit of RR should be [kg/(m3.s)]
    scalarField dc = c - c0;
    for(label i=0; i<this->nSpecie(); i++)
    {
         this->RR()[i][celli] = dc[i]*Wi[i]/deltaT;
    }




}//End of loop over all cells

scalar foundRatio =  (static_cast<scalar> (nFound_))/meshSize;
Pout << "Tabulation found " << foundRatio*100 << "% of the cells in the binary tree" << endl;
Pout << "Chemistry library size = " ;
Pout << tabPtr_->size() << endl;


if (DAC_ && nNsDAC_!=0)
    meanNsDAC_/=nNsDAC_;
else
    meanNsDAC_=NsDAC();

//Pout << "Solving Chemistry CPU Time = " << DICpuTime_ << endl;

//Pout<<"Number of Retrieves from MFU is "<<tabPtr_->NusedFromMFU()<<endl;
//Pout<<"Number of Retrieves from MRU is "<<tabPtr_->NusedFromMRU()<<endl;


